import os
import requests
from dotenv import load_dotenv

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import  Command
from aiogram.enums import ParseMode

from .base import BaseHandler
from src.utils.states import CityAwait
from src.keyboards.reply import AllMenu
from src.utils.translation import WeatherTranslator


class WeatherHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.load_api_key()

    def load_api_key(self):
        load_dotenv()
        self.api_key = os.getenv("WEATHER_API")
        if not self.api_key:
            self.log.warning("WEATHER API KEY NOT FOUND")

    def register_handlers(self):
        self.router.message.register(self.home_city_weather, Command('home_weather'))
        self.router.message.register(self.home_city_weather, F.text == '‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –≤ —Ä—ñ–¥–Ω–æ–º—É –º—ñ—Å—Ç—ñ')
        self.router.message.register(self.process_get_city, CityAwait.waiting_for_city)

        self.router.message.register(self.another_city_weather, Command('weather'))
        self.router.message.register(self.another_city_weather, F.text == '‚õàÔ∏è –ü–æ–≥–æ–¥–∞ –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ç—ñ')
        self.router.message.register(self.process_get_acw, CityAwait.waiting_for_another_city)


    async def home_city_weather(self, message: Message, state: FSMContext):
        city = self.db.get_city(message.from_user.id)

        if not city:
            await state.set_state(CityAwait.waiting_for_city)
            await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')
            return
        await self.return_city(message, city)


    async def process_get_city(self, message: Message, state: FSMContext):
        user_id = message.from_user.id
        city = message.text

        self.db.add_city(user_id, city)
        await message.answer('–£—Å–ø—ñ—Ö! –í–∞—à–µ —Ä—ñ–¥–Ω–µ –º—ñ—Å—Ç–æ –¥–æ–¥–∞–¥–æ –±–æ –ë–î.')

        await state.clear()
        await self.return_city(message, city)


    async def another_city_weather(self, message: Message, state: FSMContext):
        await state.set_state(CityAwait.waiting_for_another_city)
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')


    async def process_get_acw(self, message: Message, state: FSMContext):
        city = message.text

        await state.clear()
        await self.return_city(message, city)


    async def return_city(self, message: Message, city: str):
        base_url = 'http://api.openweathermap.org/data/2.5/weather'

        params = {
            "q": city,
            "appid": self.api_key,
            "units": "metric"
        }

        response = requests.get(base_url, params=params)

        if response.status_code == 200:
            data = response.json()

            temp = data['main']['temp']
            humid = data['main']['humidity']
            wind_speed = data['wind']['speed']
            desc = data['weather'][0]['description']

            translator = WeatherTranslator()
            ukr_desc = translator.translations.get(desc.lower()).capitalize()

            forecast_message = (
                f"üå§Ô∏è <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è {city}</b>\n\n"
                f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n"
                f"‚òî <b>–í–æ–ª–æ–≥—ñ—Å—Ç—å:</b> {humid}%\n"
                f"üå¨ <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É:</b> {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è <b>–ü–æ–≥–æ–¥–∞:</b> {ukr_desc}"
            )

            await message.answer(
                forecast_message,
                reply_markup=AllMenu().get_keyboard(),
                parse_mode=ParseMode.HTML
            )
