from aiogram import F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from src.handlers import CommonHandlers
from src.keyboards.reply import AllMenuRegister, AllMenu
from src.keyboards.inline import EditHometown
from src.utils import CityAwait
from .base import BaseHandler


class LocationHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.common_handler = CommonHandlers()


    def register_handlers(self):
        self.router.message.register(self.add_city_button, F.text == 'üèôÔ∏è –î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ')
        self.router.message.register(self.process_register_city, CityAwait.waiting_for_city)

        self.router.message.register(self.settings_hub, F.text == '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')

        self.router.callback_query.register(self.edit_city_button, F.data == 'change_city')
        self.router.callback_query.register(self.delete_city_button, F.data == "delete_city")

        self.router.message.register(self.process_edit_city, CityAwait.waiting_for_change_city)


    async def add_city_button(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üèôÔ∏è –î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ'"""
        user_id = message.from_user.id

        if self.db.get_city(user_id) is not None:
            await message.answer('–ü–æ–º–∏–ª–∫–∞! –í–∞—à–µ –º—ñ—Å—Ç–æ –≤–∂–µ —î –≤ –ë–î')
            await message.answer('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é...')
            await self.common_handler.cmd_start(message)
            return

        await state.set_state(CityAwait.waiting_for_city)
        await message.answer('–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')


    async def process_register_city(self, message: Message, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ç–∞"""
        user_id: int = message.from_user.id
        city: str = message.text

        if not city.strip().isalpha():
            await message.answer("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        self.db.add_city(user_id, city)

        await message.answer(
            "–£—Å–ø—ñ—Ö! –í–∞—à–µ –º—ñ—Å—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ë–î", 
            reply_markup=AllMenuRegister().get_keyboard()
        )

        await state.clear()


    async def settings_hub(self, message: Message):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'"""
        city = self.db.get_city(message.from_user.id)

        if not city:
            await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ")
            await self.common_handler.cmd_start(message)
            return

        await message.answer(
            f"‚öôÔ∏è <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä—ñ–¥–Ω–∏–º –º—ñ—Å—Ç–æ–º</b>\n\n"
            f"–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ <b>{city}</b>\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=EditHometown().get_keyboard(),
            parse_mode=ParseMode.HTML
        )


    async def edit_city_button(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó callback 'change_city'"""
        city = self.db.get_city(callback.from_user.id)

        await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–º—ñ–Ω–∏ –º—ñ—Å—Ç–∞...")

        await state.set_state(CityAwait.waiting_for_change_city)

        await callback.message.edit_text(
            f"<b>–ó–º—ñ–Ω–∞ —Ä—ñ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞</b>\n\n"
            f"–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ç–æ <b>{city}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ç–∞",
            parse_mode=ParseMode.HTML
        )


    async def process_edit_city(self, message: Message, state: FSMContext):
        user_id: int = message.from_user.id
        old_city: str = self.db.get_city(user_id)
        new_city: str = message.text

        if not new_city.strip().isalpha():
            await message.answer("–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        self.db.edit_city(user_id, new_city)

        await message.answer(
            f"‚úÖ <b>–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ</b>\n\n"
            f"–°—Ç–∞—Ä–µ –º—ñ—Å—Ç–æ: <b>{old_city}</b>\n"
            f"–ù–æ–≤–µ –º—ñ—Å—Ç–æ: <b>{new_city}</b>",
            parse_mode=ParseMode.HTML
        )

        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é...")

        await self.common_handler.cmd_start(message)

        await state.clear()


    async def delete_city_button(self, callback: CallbackQuery):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó callback 'delete_city'"""
        user_id = callback.from_user.id
        city = self.db.get_city(user_id)

        self.db.delete_city(user_id)

        await callback.answer("–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")

        await callback.message.edit_text(
            f"‚ùå <b>–ú—ñ—Å—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ</b>\n\n"
            f"–í–∞—à–µ —Ä—ñ–¥–Ω–µ –º—ñ—Å—Ç–æ (<b>{city}</b>) –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.",
            parse_mode=ParseMode.HTML
        )

        await callback.message.answer(
            "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...",
            reply_markup=AllMenu().get_keyboard()
        )
